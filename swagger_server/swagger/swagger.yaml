openapi: 3.0.3
info:
  title: IPL Tracking - Microservice API
  description: API description for Tracking microservice.
  version: 1.0.0
servers:
- url: http://localhost:8080/tracking
  description: Localhost - BT3 Dev
tags:
- name: Commons
  description: Commons definition
paths:
  /tdata:
    get:
      tags:
        - TData
      summary: Get Data list
      description: This operation is used to retrieve a list of Telemetry Data.
      operationId: list_tdatas
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTDatasResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.t_data_controller
    post:
      tags:
        - TData
      summary: Create new Data
      description: This operation is used to create a new Data Telemetry on System.
      operationId: create_tdata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTDataRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTDataResponse'
        "400":
          description: Parameters missing in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: There is already a data registered with same name or mail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.t_data_controller
  /tdata/{tdataId}:
    get:
      tags:
        - TData
      summary: Get a single TData's info
      description: This operation is used to retrieve the details of a specific Data.
      operationId: get_tdata
      parameters:
        - name: tdataId
          in: path
          description: Unique identifier of the Data in the database
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/UUID'
          example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTDataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.t_data_controller
    delete:
      tags:
        - TData
      summary: Delete Customer
      description: This operation is delete a Data.
      operationId: delete_tdata
      parameters:
        - name: tdataId
          in: path
          description: Unique identifier of the Data in the database
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/UUID'
          example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: Delete a data that has vehicles is not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.t_data_controller
    put:
      tags:
        - TData
      summary: Update Data's attributes
      description: This operation is used to update some of the Data's attributes.
      operationId: update_tdata
      parameters:
        - name: tdataId
          in: path
          description: Unique identifier of the Data in the database
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/UUID'
          example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTDataRequest'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: "Parameters missing in request or request is malformed. For\
            \ example, the vehicle id is not in the correct format."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: There is already a Data registered with same id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.t_data_controller
components:
  schemas:
    GetTDataResponse:
      required:
        - tdataId
        - vehicleId
      type: object
      properties:
        tdataId:
          $ref: '#/components/schemas/UUID'
        vehicleId:
          $ref: '#/components/schemas/UUID'
    CreateTDataRequest:
      required:
        - vehicleId
      type: object
      properties:
        vehicleId:
          $ref: '#/components/schemas/UUID'
    CreateTDataResponse:
      required:
        - vehicleId
        - dataHora
      type: object
      properties:
        tdataId:
          $ref: '#/components/schemas/UUID'
        vehicleId:
          $ref: '#/components/schemas/UUID'
        dataHora:
          format: date-time
          type: string
          description: Data hora
          example: '2017-07-21T17:32:28Z'
      example:
        tdataId: 0af401df-7d7a-1f36-817d-7b0a058d0003
        vehicleId: 0af401df-7d7a-1f36-817d-7b0a058d0003
        dataHora: '2017-07-21T17:32:28Z'
    ListTDatasResponse:
      required:
        - content
        - totalResults
      type: object
      properties:
        content:
          type: array
          description: list of paged items
          items:
            $ref: '#/components/schemas/GetTDataResponse'
        totalResults:
          type: integer
          description: total number of records
          format: int64
          example: 50
      description: generic paged response
      example:
        totalResults: 50
        content:
          - tdataId: 0af401df-7d7a-1f36-817d-7b0a058d0003
            vehicleId: 0af401df-7d7a-1f36-817d-7b0a058d0003
            dataHora: '2017-07-21T17:32:28Z'
    UpdateTDataRequest:
      type: object
      properties:
        vehicleId:
          $ref: '#/components/schemas/UUID'
        dataHora:
          format: date-time
          type: string
          description: Data hora
          example: '2017-07-21T17:32:28Z'
    ErrorResponse:
      required:
      - errorCode
      - errorMessage
      - errorType
      type: object
      properties:
        code:
          type: string
          description: Application error code
          example: XYZ0001
        type:
          $ref: '#/components/schemas/ErrorTypeEnum'
        message:
          type: string
          description: Short error explanation
          example: Unauthorized
        details:
          type: string
          description: Short error detail
          example: Parameter X has invalid value
    ErrorTypeEnum:
      type: string
      description: Error Type
      enum:
      - PERSISTENCE
      - BUSINESS
      - COMMUNICATION
      - UNKNOWN
    UUID:
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      type: string
      example: 0af401df-7d7a-1f36-817d-7b0a058d0003
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: swagger_server.controllers.authorization_controller.check_basicAuth

